/* LXLabs congress-app v1.0.0 */
'use strict';var support={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(a){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};function isDataView(a){return a&&DataView.prototype.isPrototypeOf(a)}if(support.arrayBuffer)var viewClasses=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],isArrayBufferView=ArrayBuffer.isView||function(a){return a&&-1<viewClasses.indexOf(Object.prototype.toString.call(a))};function normalizeName(a){if("string"!=typeof a&&(a+=""),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(a))throw new TypeError("Invalid character in header field name");return a.toLowerCase()}function normalizeValue(a){return"string"!=typeof a&&(a+=""),a}// Build a destructive iterator for the value list
function iteratorFor(a){var b={next:function(){var b=a.shift();return{done:void 0===b,value:b}}};return support.iterable&&(b[Symbol.iterator]=function(){return b}),b}function Headers(a){this.map={},a instanceof Headers?a.forEach(function(a,b){this.append(b,a)},this):Array.isArray(a)?a.forEach(function(a){this.append(a[0],a[1])},this):a&&Object.getOwnPropertyNames(a).forEach(function(b){this.append(b,a[b])},this)}Headers.prototype.append=function(a,b){a=normalizeName(a),b=normalizeValue(b);var c=this.map[a];this.map[a]=c?c+", "+b:b},Headers.prototype["delete"]=function(a){delete this.map[normalizeName(a)]},Headers.prototype.get=function(a){return a=normalizeName(a),this.has(a)?this.map[a]:null},Headers.prototype.has=function(a){return this.map.hasOwnProperty(normalizeName(a))},Headers.prototype.set=function(a,b){this.map[normalizeName(a)]=normalizeValue(b)},Headers.prototype.forEach=function(a,b){for(var c in this.map)this.map.hasOwnProperty(c)&&a.call(b,this.map[c],c,this)},Headers.prototype.keys=function(){var a=[];return this.forEach(function(b,c){a.push(c)}),iteratorFor(a)},Headers.prototype.values=function(){var a=[];return this.forEach(function(b){a.push(b)}),iteratorFor(a)},Headers.prototype.entries=function(){var a=[];return this.forEach(function(b,c){a.push([c,b])}),iteratorFor(a)},support.iterable&&(Headers.prototype[Symbol.iterator]=Headers.prototype.entries);function consumed(a){return a.bodyUsed?Promise.reject(new TypeError("Already read")):void(a.bodyUsed=!0)}function fileReaderReady(a){return new Promise(function(b,c){a.onload=function(){b(a.result)},a.onerror=function(){c(a.error)}})}function readBlobAsArrayBuffer(a){var b=new FileReader,c=fileReaderReady(b);return b.readAsArrayBuffer(a),c}function readBlobAsText(a){var b=new FileReader,c=fileReaderReady(b);return b.readAsText(a),c}function readArrayBufferAsText(a){for(var b=new Uint8Array(a),c=Array(b.length),d=0;d<b.length;d++)c[d]=String.fromCharCode(b[d]);return c.join("")}function bufferClone(a){if(a.slice)return a.slice(0);var b=new Uint8Array(a.byteLength);return b.set(new Uint8Array(a)),b.buffer}function Body(){return this.bodyUsed=!1,this._initBody=function(a){this._bodyInit=a,a?"string"==typeof a?this._bodyText=a:support.blob&&Blob.prototype.isPrototypeOf(a)?this._bodyBlob=a:support.formData&&FormData.prototype.isPrototypeOf(a)?this._bodyFormData=a:support.searchParams&&URLSearchParams.prototype.isPrototypeOf(a)?this._bodyText=a.toString():support.arrayBuffer&&support.blob&&isDataView(a)?(this._bodyArrayBuffer=bufferClone(a.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):support.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(a)||isArrayBufferView(a))?this._bodyArrayBuffer=bufferClone(a):this._bodyText=a=Object.prototype.toString.call(a):this._bodyText="",this.headers.get("content-type")||("string"==typeof a?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):support.searchParams&&URLSearchParams.prototype.isPrototypeOf(a)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},support.blob&&(this.blob=function(){var a=consumed(this);if(a)return a;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");else return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?consumed(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(readBlobAsArrayBuffer)}),this.text=function(){var a=consumed(this);if(a)return a;if(this._bodyBlob)return readBlobAsText(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");else return Promise.resolve(this._bodyText)},support.formData&&(this.formData=function(){return this.text().then(decode)}),this.json=function(){return this.text().then(JSON.parse)},this}// HTTP methods whose capitalization should be normalized
var methods=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function normalizeMethod(a){var b=a.toUpperCase();return-1<methods.indexOf(b)?b:a}function Request(a,b){b=b||{};var c=b.body;if(a instanceof Request){if(a.bodyUsed)throw new TypeError("Already read");this.url=a.url,this.credentials=a.credentials,b.headers||(this.headers=new Headers(a.headers)),this.method=a.method,this.mode=a.mode,this.signal=a.signal,c||null==a._bodyInit||(c=a._bodyInit,a.bodyUsed=!0)}else this.url=a+"";if(this.credentials=b.credentials||this.credentials||"same-origin",(b.headers||!this.headers)&&(this.headers=new Headers(b.headers)),this.method=normalizeMethod(b.method||this.method||"GET"),this.mode=b.mode||this.mode||null,this.signal=b.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&c)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(c)}Request.prototype.clone=function(){return new Request(this,{body:this._bodyInit})};function decode(a){var b=new FormData;return a.trim().split("&").forEach(function(a){if(a){var c=a.split("="),d=c.shift().replace(/\+/g," "),e=c.join("=").replace(/\+/g," ");b.append(decodeURIComponent(d),decodeURIComponent(e))}}),b}function parseHeaders(a){var b=new Headers,c=a.replace(/\r?\n[\t ]+/g," ");// Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
// https://tools.ietf.org/html/rfc7230#section-3.2
return c.split(/\r?\n/).forEach(function(a){var c=a.split(":"),d=c.shift().trim();if(d){var e=c.join(":").trim();b.append(d,e)}}),b}Body.call(Request.prototype);function Response(a,b){b||(b={}),this.type="default",this.status=b.status===void 0?200:b.status,this.ok=200<=this.status&&300>this.status,this.statusText="statusText"in b?b.statusText:"OK",this.headers=new Headers(b.headers),this.url=b.url||"",this._initBody(a)}Body.call(Response.prototype),Response.prototype.clone=function(){return new Response(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new Headers(this.headers),url:this.url})},Response.error=function(){var a=new Response(null,{status:0,statusText:""});return a.type="error",a};var redirectStatuses=[301,302,303,307,308];Response.redirect=function(a,b){if(-1===redirectStatuses.indexOf(b))throw new RangeError("Invalid status code");return new Response(null,{status:b,headers:{location:a}})};var DOMException=self.DOMException;try{new DOMException}catch(a){DOMException=function(a,b){this.message=a,this.name=b;var c=Error(a);this.stack=c.stack},DOMException.prototype=Object.create(Error.prototype),DOMException.prototype.constructor=DOMException}function fetch(a,b){return new Promise(function(c,d){function e(){g.abort()}var f=new Request(a,b);if(f.signal&&f.signal.aborted)return d(new DOMException("Aborted","AbortError"));var g=new XMLHttpRequest;g.onload=function(){var a={status:g.status,statusText:g.statusText,headers:parseHeaders(g.getAllResponseHeaders()||"")};a.url="responseURL"in g?g.responseURL:a.headers.get("X-Request-URL");var b="response"in g?g.response:g.responseText;c(new Response(b,a))},g.onerror=function(){d(new TypeError("Network request failed"))},g.ontimeout=function(){d(new TypeError("Network request failed"))},g.onabort=function(){d(new DOMException("Aborted","AbortError"))},g.open(f.method,f.url,!0),"include"===f.credentials?g.withCredentials=!0:"omit"===f.credentials&&(g.withCredentials=!1),"responseType"in g&&support.blob&&(g.responseType="blob"),f.headers.forEach(function(a,b){g.setRequestHeader(b,a)}),f.signal&&(f.signal.addEventListener("abort",e),g.onreadystatechange=function(){4===g.readyState&&f.signal.removeEventListener("abort",e)}),g.send("undefined"==typeof f._bodyInit?null:f._bodyInit)})}fetch.polyfill=!0,self.fetch||(self.fetch=fetch,self.Headers=Headers,self.Request=Request,self.Response=Response);// the whatwg-fetch polyfill installs the fetch() function
// on the global object (window or self)
//
// Return that as the export for use in Webpack, Browserify etc.
var fetchNpmBrowserify=self.fetch.bind(self);const getProjects=async(a,b=6)=>{const c=await fetchNpmBrowserify(`https://api.github.com/users/thomasxbanks/repos?page=${a}&per_page=${b}`),d=await c.json(),e=[];return!!d&&(d.forEach(a=>{e.push({title:a.name,repo:a.html_url,demo:!!a.has_pages&&`https://${a.owner.login}.github.io/${a.name}`})}),e)},displayProject=(a,b)=>{const c=document.querySelector("[data-template=\"project\"]"),d=document.importNode(c,!0),e={main:d.content.querySelector("[data-project]"),title:d.content.querySelector("[data-title]"),repo:d.content.querySelector("[data-repo]"),demo:d.content.querySelector("[data-demo]")};e.title.innerHTML=a.title,e.repo.href=a.repo,e.demo.href=a.demo,a.demo||e.demo.setAttribute("hidden",!0),b.insertAdjacentElement("afterbegin",e.main)},displayProjects=async()=>{const a=await getProjects();if(!a)return;const b=document.querySelector("[data-projects] .cards");a.forEach(a=>displayProject(a,b))},toggleTheme=()=>{const a=document.body.dataset.theme;document.body.dataset.theme="light"===a?"dark":"light"},init=()=>{const a=document.querySelector("[data-toggle-theme]");a.addEventListener("click",toggleTheme)},lang=navigator.language||navigator.language||"en-GB",tz=Intl.DateTimeFormat().resolvedOptions().timeZone||"CET";document.documentElement.lang=lang,document.documentElement.setAttribute("tz",tz);const init$1=async()=>{console.log("init"),displayProjects(),init()};window.onload=init$1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
